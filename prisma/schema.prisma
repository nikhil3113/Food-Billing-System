// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      String   @default("customer") // customer, admin, staff
  phone     String?
  address   String?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?
  foodItems   FoodItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model FoodItem {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  image       String?
  available   Boolean     @default(true)
  categoryId  String      @db.ObjectId
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Order {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  items       OrderItem[]
  subtotal    Float
  tax         Float
  total       Float
  status      String    @default("pending") // pending, completed, cancelled
  paymentMethod String
  customerName String?
  customerEmail String?
  customerPhone String?
  userId      String?   @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model OrderItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @db.ObjectId
  order      Order    @relation(fields: [orderId], references: [id])
  foodItemId String   @db.ObjectId
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  quantity   Int
  price      Float // Store price at time of purchase
  subtotal   Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
